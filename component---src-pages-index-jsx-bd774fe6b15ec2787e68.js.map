{"version":3,"sources":["webpack:///./src/components/emoji.jsx","webpack:///./src/pages/index.jsx","webpack:///./src/components/seo.jsx","webpack:///./src/components/footer.jsx","webpack:///./src/components/layout.jsx"],"names":["Emoji","_ref","ariaLabel","text","react_default","a","createElement","role","IndexPage","layout","title","rbx","size","emoji","subtitle","href","SEO","description","lang","meta","site","_2417117884","data","metaDescription","siteMetadata","Helmet_default","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","Footer","style","paddingBottom","textAlign","Date","getFullYear","Layout","children","_2787201768","Fragment","seo","color","Body","Foot","footer"],"mappings":"qHAaeA,EATD,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,UAAWC,EAAdF,EAAcE,KAAd,OACZC,EAAAC,EAAAC,cAAA,QAAMC,KAAK,MAAML,UAAWA,GAAYC,sBC6B3BK,UA3BG,kBAChBJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQC,MAAM,QACZN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOC,KAAM,GAAb,UACSR,EAAAC,EAAAC,cAACO,EAAD,CAAOV,KAAK,KAAKD,UAAU,sBAEpCE,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOC,KAAM,EAAGE,UAAQ,GAAxB,uBAGAV,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAAA,6DACAF,EAAAC,EAAAC,cAAA,0RAGAF,EAAAC,EAAAC,cAAA,mBACU,IACRF,EAAAC,EAAAC,cAAA,KAAGS,KAAK,6CAAR,wBAFF,IAEgF,IAC9EX,EAAAC,EAAAC,cAAA,KAAGS,KAAK,gFAAR,sBAHF,IAGiH,IAC/GX,EAAAC,EAAAC,cAAA,KAAGS,KAAK,iEAAR,iBAJF,IAI6F,IAC3FX,EAAAC,EAAAC,cAAA,KAAGS,KAAK,6EAAR,cAAmG,IALrG,OAMMX,EAAAC,EAAAC,cAAA,KAAGS,KAAK,gFAAR,gBANN,IAM+G,IAN/G,6CASAX,EAAAC,EAAAC,cAAA,0aCjBN,SAASU,EAATf,GAAiD,IAAlCgB,EAAkChB,EAAlCgB,YAAaC,EAAqBjB,EAArBiB,KAAMC,EAAelB,EAAfkB,KAAMT,EAAST,EAATS,MAC9BU,EADuCC,EAAAC,KACvCF,KAcFG,EAAkBN,GAAeG,EAAKI,aAAaP,YAEzD,OACEb,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CACEqB,eAAgB,CACdR,QAEFR,MAAOA,EACPiB,cAAa,QAAUP,EAAKI,aAAad,MACzCS,KAAM,CACJ,CACES,KAAI,cACJC,QAASN,GAEX,CACEO,SAAQ,WACRD,QAASnB,GAEX,CACEoB,SAAQ,iBACRD,QAASN,GAEX,CACEO,SAAQ,UACRD,QAAO,WAET,CACED,KAAI,eACJC,QAAO,WAET,CACED,KAAI,kBACJC,QAAST,EAAKI,aAAaO,QAE7B,CACEH,KAAI,gBACJC,QAASnB,GAEX,CACEkB,KAAI,sBACJC,QAASN,IAEXS,OAAOb,KAKfH,EAAIiB,aAAe,CACjBf,KAAI,KACJC,KAAM,GACNF,YAAW,IAUED,QC9EAkB,EANA,SAAAjC,GAAA,IAAG8B,EAAH9B,EAAG8B,OAAH,OACb3B,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAASwB,MAAO,CAAEC,cAAe,QAAUC,UAAU,YACnDjC,EAAAC,EAAAC,cAAA,eAAM,IAAIgC,MAAOC,cAAjB,IAAiCR,KC4CtBS,IAhCA,SAAAvC,GAAyB,IAAtBS,EAAsBT,EAAtBS,MAAO+B,EAAexC,EAAfwC,SACjBnB,EAAIoB,EAAApB,KAWV,OACElB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAsC,SAAA,KACEvC,EAAAC,EAAAC,cAACsC,EAAD,CAAKlC,MAAOA,IACZN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMkC,MAAM,UAAUjC,KAAK,cACzBR,EAAAC,EAAAC,cAACK,EAAA,EAAKmC,KAAN,KACE1C,EAAAC,EAAAC,cAACK,EAAA,EAAD,KAAY8B,IAEdrC,EAAAC,EAAAC,cAACK,EAAA,EAAKoC,KAAN,KACE3C,EAAAC,EAAAC,cAAC0C,EAAD,CAAQjB,OAAQT,EAAKF,KAAKI,aAAaO","file":"component---src-pages-index-jsx-bd774fe6b15ec2787e68.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n\n\nconst Emoji = ({ ariaLabel, text }) => (\n  <span role=\"img\" ariaLabel={ariaLabel}>{text}</span>\n)\n\nEmoji.propTypes = {\n  ariaLabel: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n}\n\nexport default Emoji\n","import React from \"react\"\n\nimport Emoji from \"../components/emoji\"\nimport Layout from \"../components/layout\"\n\nimport { Content, Title } from \"rbx\";\n\nconst IndexPage = () => (\n  <Layout title=\"Home\">\n    <Title size={1}>\n      Hello! <Emoji text=\"ðŸ‘‹\" ariaLabel=\"waving-hand-sign\" />\n    </Title>\n    <Title size={3} subtitle>\n      My name is mechpig.\n    </Title>\n    <Content>\n      <p>I'm a software developer living in Milan, Italy.</p>\n      <p>A lot of my job consists of designing and building web APIs and helping others doing the same.\n      I work mainly in Python and Node.js, but I have an interest in programming languages and software development at large.\n      I always try to write clean, modular and concise code.</p>\n      <p>\n        I value{' '}\n        <a href=\"https://www.python.org/dev/peps/pep-0020/\">pragmatic minimalism</a>,{' '}\n        <a href=\"https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html\">clean architecture</a>,{' '}\n        <a href=\"https://www.michaelnygard.com/blog/2017/11/keep-em-separated/\">microservices</a>,{' '}\n        <a href=\"https://global.toyota/en/company/vision-and-philosophy/production-system/\">automation</a>{' '}\n        and <a href=\"https://www.fpcomplete.com/blog/2017/02/immutability-docker-haskells-st-type\">immutability</a>,{' '}\n        and try to pursue them whenever possible.\n      </p>\n      <p>I have a MSc in Computer Science from Politecnico di Milano.</p>\n    </Content>\n  </Layout>\n)\n\nexport default IndexPage\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from \"react\"\nimport { Content } from \"rbx\"\n\nconst Footer = ({ author }) => (\n  <Content style={{ paddingBottom: '1rem' }} textAlign=\"centered\">\n    <p>Â© {new Date().getFullYear()} {author}</p>\n  </Content>\n)\n\nexport default Footer\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { graphql, useStaticQuery } from \"gatsby\"\n\nimport \"../style.scss\"\nimport { Container, Hero } from \"rbx\"\n\nimport SEO from \"./seo\"\nimport Footer from \"./footer\"\n\nconst Layout = ({ title, children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title,\n          author\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <SEO title={title} />\n      <Hero color=\"primary\" size=\"fullheight\">\n        <Hero.Body>\n          <Container>{children}</Container>\n        </Hero.Body>\n        <Hero.Foot>\n          <Footer author={data.site.siteMetadata.author} />\n        </Hero.Foot>\n      </Hero>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}