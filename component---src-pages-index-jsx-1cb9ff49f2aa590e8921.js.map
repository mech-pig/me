{"version":3,"sources":["webpack:///./src/components/emoji.jsx","webpack:///./src/pages/index.jsx","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.jsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/layout.jsx"],"names":["Emoji","_ref","ariaLabel","text","react_default","a","createElement","role","IndexPage","layout","seo","title","emoji","href","m","module","exports","require","default","ProdPageRenderer","location","pageResources","React","InternalPageRenderer","Object","assign","json","SEO","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","data","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","loader","enqueue","createContext","Layout","children","_2787201768","style","margin","maxWidth","padding","marginBottom","gatsby_link_default","to","textShadow","display","Date","getFullYear"],"mappings":"qHAaeA,EATD,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,UAAWC,EAAdF,EAAcE,KAAd,OACZC,EAAAC,EAAAC,cAAA,QAAMC,KAAK,MAAML,UAAWA,GAAYC,sBC6B3BK,UA3BG,kBAChBJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,MAAM,SACXP,EAAAC,EAAAC,cAAA,iBAAQF,EAAAC,EAAAC,cAACM,EAAD,CAAOT,KAAK,KAAKD,UAAU,sBACnCE,EAAAC,EAAAC,cAAA,6FAGAF,EAAAC,EAAAC,cAAA,mOAIAF,EAAAC,EAAAC,cAAA,0EAGK,IAAIF,EAAAC,EAAAC,cAAA,KAAGO,KAAK,6CAAR,wBAHT,IAIK,IAAIT,EAAAC,EAAAC,cAAA,KAAGO,KAAK,gFAAR,sBAJT,IAKK,IAAIT,EAAAC,EAAAC,cAAA,KAAGO,KAAK,iEAAR,iBALT,IAMK,IAAIT,EAAAC,EAAAC,cAAA,KAAGO,KAAK,6EAAR,cANT,OAOK,IAAIT,EAAAC,EAAAC,cAAA,KAAGO,KAAK,gFAAR,gBAPT,IAQG,IARH,6CAUAT,EAAAC,EAAAC,cAAA,gGC5BJ,IAAsBQ,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,mLCsBhCK,UAjBU,SAAAlB,GAAiC,IAA9BmB,EAA8BnB,EAA9BmB,SAAUC,EAAoBpB,EAApBoB,cACpC,OAAKA,EAGEC,IAAMhB,cAAciB,IAApBC,OAAAC,OAAA,CACLL,WACAC,iBACGA,EAAcK,OALV,uFCKX,SAASC,EAAT1B,GAAiD,IAAlC2B,EAAkC3B,EAAlC2B,YAAaC,EAAqB5B,EAArB4B,KAAMC,EAAe7B,EAAf6B,KAAMnB,EAASV,EAATU,MAC9BoB,EADuCC,EAAAC,KACvCF,KAcFG,EAAkBN,GAAeG,EAAKI,aAAaP,YAEzD,OACEQ,EAAA/B,EAAAC,cAAC+B,EAAAhC,EAAD,CACEiC,eAAgB,CACdT,QAEFlB,MAAOA,EACP4B,cAAa,QAAUR,EAAKI,aAAaxB,MACzCmB,KAAM,CACJ,CACEU,KAAI,cACJC,QAASP,GAEX,CACEQ,SAAQ,WACRD,QAAS9B,GAEX,CACE+B,SAAQ,iBACRD,QAASP,GAEX,CACEQ,SAAQ,UACRD,QAAO,WAET,CACED,KAAI,eACJC,QAAO,WAET,CACED,KAAI,kBACJC,QAASV,EAAKI,aAAaQ,QAE7B,CACEH,KAAI,gBACJC,QAAS9B,GAEX,CACE6B,KAAI,sBACJC,QAASP,IAEXU,OAAOd,KAKfH,EAAIkB,aAAe,CACjBhB,KAAI,KACJC,KAAM,GACNF,YAAW,IAUED,8OCzEUmB,QAAOC,QAELzB,IAAM0B,cAAc,IC2BhCC,IA/BA,SAAAhD,GAAkB,IAAfiD,EAAejD,EAAfiD,SACVjB,EAAIkB,EAAAlB,KAWV,OACE7B,EAAAC,EAAAC,cAAA,OAAK8C,MAAO,CAAEC,OAAM,YAAeC,SAAU,IAAKC,QAAO,WACvDnD,EAAAC,EAAAC,cAAA,UAAQ8C,MAAO,CAAEI,aAAY,WAC3BpD,EAAAC,EAAAC,cAACmD,EAAApD,EAAD,CAAMqD,GAAG,IAAIN,MAAO,CAAEO,WAAU,SAC9BvD,EAAAC,EAAAC,cAAA,MAAI8C,MAAO,CAAEQ,QAAO,WAApB,gBAGJxD,EAAAC,EAAAC,cAAA,YAAO4C,GACP9C,EAAAC,EAAAC,cAAA,oBACK,IAAIuD,MAAOC,cADhB,IACgC7B,EAAKF,KAAKI,aAAaQ","file":"component---src-pages-index-jsx-1cb9ff49f2aa590e8921.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n\n\nconst Emoji = ({ ariaLabel, text }) => (\n  <span role=\"img\" ariaLabel={ariaLabel}>{text}</span>\n)\n\nEmoji.propTypes = {\n  ariaLabel: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n}\n\nexport default Emoji\n","import React from \"react\"\n\nimport Emoji from \"../components/emoji\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\n\nconst IndexPage = () => (\n  <Layout>\n    <SEO title=\"Home\" />\n    <h1>Hi! <Emoji text=\"ðŸ‘‹\" ariaLabel=\"waving-hand-sign\" /></h1>\n    <p>\n      My name is Matteo Avellina and I am a software developer living in Milan, Italy.\n    </p>\n    <p>\n      A lot of my job consists of designing and building web APIs and helping others doing the same.\n      I work mainly in Python and Node.js, but I have an interest in programming languages and software development at large.\n    </p>\n    <p>\n      I always try to write clean, modular and concise code.\n      I value\n        {' '}<a href=\"https://www.python.org/dev/peps/pep-0020/\">pragmatic minimalism</a>,\n        {' '}<a href=\"https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html\">clean architecture</a>,\n        {' '}<a href=\"https://www.michaelnygard.com/blog/2017/11/keep-em-separated/\">microservices</a>,\n        {' '}<a href=\"https://global.toyota/en/company/vision-and-philosophy/production-system/\">automation</a> and\n        {' '}<a href=\"https://www.fpcomplete.com/blog/2017/02/immutability-docker-haskells-st-type\">immutability</a>,\n      {' '}and try to pursue them whenever possible.\n    </p>\n    <p>\n      I have a MSc in Computer Science from Politecnico di Milano.\n    </p>\n  </Layout>\n)\n\nexport default IndexPage\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { graphql, Link, useStaticQuery } from \"gatsby\"\n\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title,\n          author\n        }\n      }\n    }\n  `)\n\n  return (\n    <div style={{ margin: `3rem auto`, maxWidth: 650, padding: `0 1rem` }}>\n      <header style={{ marginBottom: `1.5rem` }}>\n        <Link to=\"/\" style={{ textShadow: `none` }}>\n          <h3 style={{ display: `inline` }}>mechpig.me</h3>\n        </Link>\n      </header>\n      <main>{children}</main>\n      <footer>\n        Â© {new Date().getFullYear()} {data.site.siteMetadata.author}\n      </footer>\n    </div>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}